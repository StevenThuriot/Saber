<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DatamemberBracketClose" xml:space="preserve">
    <value>]</value>
  </data>
  <data name="DatamemberBracketOpen" xml:space="preserve">
    <value>[</value>
  </data>
  <data name="DatamemberEquals" xml:space="preserve">
    <value> = </value>
  </data>
  <data name="EmptyGuids" xml:space="preserve">
    <value>Some of the passed Guids are empty</value>
  </data>
  <data name="EndOfSentence" xml:space="preserve">
    <value>.</value>
  </data>
  <data name="ErrorSeparator" xml:space="preserve">
    <value>, </value>
  </data>
  <data name="ExceptionNotThrown" xml:space="preserve">
    <value>Exception of type {0} should have been thrown</value>
  </data>
  <data name="GuardErrorMessage" xml:space="preserve">
    <value>Args: </value>
  </data>
  <data name="GuardErrorMessageBase" xml:space="preserve">
    <value>Class: {0} - Method: {1} - </value>
  </data>
  <data name="GuidParseError" xml:space="preserve">
    <value>Not all arguments can not be converted to Guids</value>
  </data>
  <data name="InvalidEmail" xml:space="preserve">
    <value>An invalid email has been passed.</value>
  </data>
  <data name="IsFalse" xml:space="preserve">
    <value>Not all booleans are false</value>
  </data>
  <data name="IsSerializable" xml:space="preserve">
    <value>A type was passed that wasn't serializable</value>
  </data>
  <data name="IsTrue" xml:space="preserve">
    <value>Not all booleans are true</value>
  </data>
  <data name="NegativeNumbers" xml:space="preserve">
    <value>Negative numbers have been passed.</value>
  </data>
  <data name="NegativeNumbersOrZero" xml:space="preserve">
    <value>Negative numbers or zero have been passed.</value>
  </data>
  <data name="NoArguments" xml:space="preserve">
    <value>No arguments</value>
  </data>
  <data name="NotAllDatesAreInTheFuture" xml:space="preserve">
    <value>Not all passed dates are in the future</value>
  </data>
  <data name="NotAllDatesAreInThePast" xml:space="preserve">
    <value>Not all passed dates are in the past</value>
  </data>
  <data name="NotCompliant" xml:space="preserve">
    <value>Some of the passed arguments aren't compliant with the given expression</value>
  </data>
  <data name="NullEmptyOrWhiteSpaceHasBeenPassed" xml:space="preserve">
    <value>NULL, empty or whitespace has been passed</value>
  </data>
  <data name="NullHasBeenPassed" xml:space="preserve">
    <value>NULL has been passed</value>
  </data>
  <data name="NullValue" xml:space="preserve">
    <value>NULL</value>
  </data>
  <data name="PositiveNumbers" xml:space="preserve">
    <value>Positive numbers have been passed.</value>
  </data>
  <data name="PostiveNumbersOrZero" xml:space="preserve">
    <value>Positive numbers or zero have been passed.</value>
  </data>
  <data name="SentenceSeparator" xml:space="preserve">
    <value>: </value>
  </data>
  <data name="StartBeforeEndDate" xml:space="preserve">
    <value>The start datetime is after or equal to end datetime</value>
  </data>
  <data name="TypeCannotBeAssigned" xml:space="preserve">
    <value>Type {0} can not be assigned to {1}</value>
  </data>
  <data name="TypeCannotBeAssignedInterface" xml:space="preserve">
    <value>Type {0} can not be assigned to {1}: interface is not implemented</value>
  </data>
  <data name="WrongException" xml:space="preserve">
    <value>An exception of the wrong type was thrown.\n\nExpected: &lt;{0}&gt;\nActual: &lt;{1}&gt;</value>
  </data>
  <data name="WrongMessage" xml:space="preserve">
    <value>The exception messages are not equal.\n\nExpected: &lt;{0}&gt;\nActual: &lt;{1}&gt;</value>
  </data>
</root>